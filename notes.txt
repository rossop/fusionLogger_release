
class eventsLog(eventData, first, last):
    def __init__(self, eventData=None):
        self.eventData = eventData

        a = propCommandExecuteHandler()

        logger.info('Command: {} '.format(self.event))
        logger.info('User Details: {} - {}'.format(self.fullname, self.email))

    @property
    def event(self):
        try:
            formatter =  '{} happened'.format(self.eventData)
        except:
            logger.exception('EventNotLogged')
        else:
            return formatter


    @property
    def email(self):
        return '{}.{}@email.com'.format(self.first, self.last)

    @property
    def fullname(self):
        return '{} {}'.format(self.first, self.last)




# Event handler for the commandStarting event.
class MyCommandStartingHandler(adsk.core.ApplicationCommandEventHandler):
    def __init__(self):
        super().__init__()
    def notify(self, args):
        try:
            eventArgs = adsk.core.ApplicationCommandEventArgs.cast(args)
            self.eventArgs = eventArgs
        if eventArgs:
            # Code to react to the event.
            ui.messageBox('In MyCommandStartingHandler event handler.')


class loggerMouseEventHandler(adsk.core.MouseEventHandler):
    def __init__(self):
        super().__init__()
    def notify(self,args):
        try:
            eventArgs = adsk.core.MouseEventArgs.cast(args)
            if eventArgs:
                ui.messageBox('HelloWorld')
        except:
            if ui:
                ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))


# Event handler for the execute event.
class propCommandExecuteHandler(adsk.core.CommandEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args):
        try:
            eventArgs = adsk.core.CommandEventArgs.cast(args)

            # Get the values from the command inputs.
            inputs = eventArgs #.command

            msg = "method  in command: " + "\t".join(inputs)  # fully build the message
            logger.info(msg)  # and then log it

        except:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))